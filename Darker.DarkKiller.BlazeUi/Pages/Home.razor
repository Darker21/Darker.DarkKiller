@using Darker.DarkKiller.Constants
@using Darker.DarkKiller.Models
@using System.ComponentModel.DataAnnotations
@using Darker.DarkKiller.State

@attribute [Route(AppRoutes.Home)]

@inject ILogger<Home> logger;
@inject GameState game;
@inject NavigationManager navMan;

<PageTitle>Home</PageTitle>

<h1>Welcome!</h1>

<FluentEditForm FormName="PlayerCreation" Model="_playerEditing" OnValidSubmit="CreatePlayer">
    <FluentCard>
        <DataAnnotationsValidator />
        <h4>@(_isCreatingPlayer ? "Add a new player" : "Update player")</h4>
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentTextField InputMode="InputMode.Text" Placeholder="Name..." @bind-Value="_playerEditing.Name"></FluentTextField>
            @if (_isCreatingPlayer is false)
            {
                <FluentNumberField Placeholder="1...32" @bind-Value="_playerEditing.ThrowOrder"></FluentNumberField>
            }
            <FluentButton Type="ButtonType.Submit" Title="@(_formButtonText)">@_formButtonText</FluentButton>
        </FluentStack>
        <FluentValidationSummary />
    </FluentCard>
</FluentEditForm>

@if (game.Players.Count is not 0)
{
    <FluentDataGrid Items="@game.Players.AsQueryable()">
        <PropertyColumn Property="@(p => p.DisplayName)" Title="Display Name" Sortable="true" />
        <PropertyColumn Property="@(p => p.Order)" Title="Throw Order" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Ascending" />
        <TemplateColumn Align="Align.Center" Title="Options" Sortable="false">
            <FluentButton OnClick="() => EditPlayer(context)" aria-label="Edit player" IconEnd="@(new Icons.Regular.Size16.Edit())" />
        </TemplateColumn>
    </FluentDataGrid>
}

<FluentButton Appearance="Appearance.Accent" Type="ButtonType.Button" OnClick="navMan.NavigateToGame" IconEnd="@(new Icons.Regular.Size16.ArrowNext())">Continue</FluentButton>

@code {
    private IQueryable<Player>? Players;
    private EditingPlayer _playerEditing = new EditingPlayer();
    private bool _isCreatingPlayer = true;
    private string _formButtonText => _isCreatingPlayer ? "Add Player" : "Update Player";

    private void OnFormSubmit()
    {
        if (_isCreatingPlayer)
            CreatePlayer();
        else
            SavePlayer();
    }

    private void CreatePlayer()
    {
        logger.LogWarning(_playerEditing.Name);
        game.AddPlayer(new Player
        {
            DisplayName = _playerEditing.Name!,
            Order = game.Players.Count + 1
        });
    }

    private void SavePlayer()
    {
        // game.Players
    }

    private void EditPlayer(Player player)
    {
        logger.LogDebug(_playerEditing.Name);
        var foundPlayer = game.Players.Find(p => player.Id == p.Id);
        if (foundPlayer is null)
        {
            throw new ArgumentException($"Player was not found: {player.Id}", nameof(player.Id));
        }

        _isCreatingPlayer = false;
        _playerEditing = new EditingPlayer(foundPlayer);
    }

    private class EditingPlayer
    {
        public Guid Id { get; set; }

        [Required]
        [MinLength(3)]
        public string? Name { get; set; }

        [Range(1, 32)]
        public int ThrowOrder { get; set; } = 1;

        public EditingPlayer()
        {

        }

        public EditingPlayer(Player player)
        {
            Name = player.DisplayName;
            ThrowOrder = player.Order;
        }
    }
}