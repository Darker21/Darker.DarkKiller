@using Darker.DarkKiller.Constants
@using Darker.DarkKiller.Models
@using Darker.DarkKiller.State;
@using System.ComponentModel.DataAnnotations

@attribute [Route(AppRoutes.Game)]

@inject GameState game
@inject NavigationManager navMan;

<PageTitle>Killer | Inprogress</PageTitle>

@{
    var roundLabel = _roundNumber > 0 ? $"Round - {_roundNumber}" : "Throw to decide your target number";
}
<h1>@roundLabel</h1>

<FluentGrid Spacing="4" AdaptiveRendering="true" Justify="JustifyContent.FlexStart">

    @if ( game.Players.Count is 0 )
    {
        <FluentGridItem xs="12" md="6" xl="4">
            <FluentCard>
                <p>No Players Configured</p>
                <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Button" OnClick="navMan.NavigateToHome" IconStart="@(new Icons.Regular.Size16.ArrowStepBack())">Go Back</FluentButton>
            </FluentCard>
        </FluentGridItem>
    }
    @if ( game.Players.Count is not 0 )
    {
        <FluentGridItem xs="12" lg="4">
            <FluentCard>
                <h2>Players</h2>
                <FluentDataGrid Items="@game.Players.AsQueryable()">
                    <PropertyColumn Property="@(p => p.DisplayName)" Title="Name" Sortable="false" />
                    <PropertyColumn Property="@(p => p.Lives)" Title="Lives" Sortable="false" />
                    <PropertyColumn Property="@(p => p.TargetNumber)" Title="Target" Sortable="false" />
                </FluentDataGrid>
            </FluentCard>
        </FluentGridItem>

        <FluentGridItem xs="12" md="8">
            <FluentCard AreaRestricted="false">
                <FluentEditForm FormName="PlayerTurn" Model="@activeTurn" OnSubmit="RecordTurn">
                    <h2>@_currentPlayer.DisplayName - To Throw</h2>
                    <table>
                        <thead>
                            <tr>
                                <th>Throw 1</th>
                                @if ( _roundNumber > 0 )
                                {
                                    <th>Throw 2</th>
                                    <th>Throw 3</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <FluentAutocomplete Id="inputThrow1" Multiple="true" MaximumSelectedOptions="1" AutoComplete="false" OnOptionsSearch="OnScoreSearch" TOption="KeyValuePair<string, int>" OptionText="kvp => kvp.Key" @bind-SelectedOptions="activeTurn.Throw1" />
                                </td>
                                @if ( _roundNumber > 0 )
                                {
                                    <td>
                                        <FluentAutocomplete Id="inputThrow2" Multiple="true" MaximumSelectedOptions="1" AutoComplete="false" OnOptionsSearch="OnScoreSearch" TOption="KeyValuePair<string, int>" OptionText="kvp => kvp.Key" @bind-SelectedOptions="activeTurn.Throw2" />
                                    </td>
                                    <td>
                                        <FluentAutocomplete Id="inputThrow3" Multiple="true" MaximumSelectedOptions="1" AutoComplete="false" OnOptionsSearch="OnScoreSearch" TOption="KeyValuePair<string, int>" OptionText="kvp => kvp.Key" @bind-SelectedOptions="activeTurn.Throw3" />
                                    </td>
                                }
                            </tr>
                        </tbody>
                    </table>
                    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size16.Save())">Save Score</FluentButton>
                </FluentEditForm>
            </FluentCard>
        </FluentGridItem>
    }

</FluentGrid>

@code {
    private int _turnNumber = 0;

    int TurnNumber
    {
        get => _turnNumber;
        set
        {
            _turnNumber = value;
            activeTurn = new()
                {
                    Player = _currentPlayer,
                    Throw1 = default!,
                    Throw2 = default!,
                    Throw3 = default!,
                };
        }
    }

    private double _roundNumber => game.Players.Count > 0 ? Math.Floor((double)(_turnNumber / game.Players.Count())) : 0;

    private Player _currentPlayer => game.Players[_turnNumber % game.Players.Count];

    private Turn activeTurn { get; set; } = default!;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        activeTurn = new Turn
            {
                Player = _currentPlayer,
                Throw1 = default!,
                Throw2 = default!,
                Throw3 = default!,
            };
    }

    private void RecordTurn()
    {
        if ( _roundNumber is 0 )
        {
            game.Players.Find(p => p.Id == _currentPlayer.Id)!.TargetNumber = activeTurn.Throw1.First().Value;
        }
        TurnNumber++;
    }

    private void OnScoreSearch(OptionsSearchEventArgs<KeyValuePair<string, int>> autocomplete)
    {
        autocomplete.Items = DartBoardValues.DartBoardValueDictionary.Where(kvp => kvp.Key.Contains(autocomplete.Text, StringComparison.InvariantCultureIgnoreCase));
    }

    protected class Turn
    {
        public Player Player { get; init; } = default!;

        [Required]
        public IEnumerable<KeyValuePair<string, int>> Throw1 { get; set; } = default!;

        [Required]
        public IEnumerable<KeyValuePair<string, int>> Throw2 { get; set; } = default!;

        [Required]
        public IEnumerable<KeyValuePair<string, int>> Throw3 { get; set; } = default!;
    }
}
